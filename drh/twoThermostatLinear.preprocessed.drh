[-20, 100] x1;
[-20, 100] x2;
[0, 30000] time;
{mode 1;
  invt: (x1 > 0);
        (x2 > 0);
  flow:
        d/dt[x1] = -0.4;
        d/dt[x2] = -0.6;
  jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) ==>
          @1 (and (x1' = x1) (x2' = x2));
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) ==>
          @2 (and (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) ==>
          @3 (and (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) ==>
          @4 (and (x1' = x1) (x2' = x2));
}
{mode 2;
  invt: (x1 > 0);
        (x2 < 50);
  flow:
        d/dt[x1] = -0.4;
        d/dt[x2] = 1;
  jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) ==>
          @1 (and (x1' = x1) (x2' = x2));
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) ==>
          @2 (and (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) ==>
          @3 (and (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) ==>
          @4 (and (x1' = x1) (x2' = x2));
}
{mode 3;
  invt: (x1 < 50);
        (x2 > 0);
  flow:
        d/dt[x1] = 0.7;
        d/dt[x2] = -0.6;
  jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) ==>
          @1 (and (x1' = x1) (x2' = x2));
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) ==>
          @2 (and (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) ==>
          @3 (and (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) ==>
          @4 (and (x1' = x1) (x2' = x2));
}
{mode 4;
  invt: (x1 < 50);
        (x2 < 50);
  flow:
        d/dt[x1] = 0.7;
        d/dt[x2] = 1;
  jump:
        (and (x1 > ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) ==>
          @1 (and (x1' = x1) (x2' = x2));
        (and (x1 > ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) ==>
          @2 (and (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 > ((x1 + x2) / 2))) ==>
          @3 (and (x1' = x1) (x2' = x2));
        (and (x1 <= ((x1 + x2) / 2)) (x2 <= ((x1 + x2) / 2))) ==>
          @4 (and (x1' = x1) (x2' = x2));
}
init:
@1 (and (x1 >= 20 - 0.1) (x1 <= 20 + 0.1) (x2 >= 20 + 3) (x2 <= 20 + 3.5));
goal:
@1 (x1 > 35);
@2 (x1 > 35);
@3 (x1 > 35);
@4 (x1 > 35);
